
/*
**  emxAEFCollectionBase
**
**  Copyright (c) 1992-2020 Dassault Systemes.
**  All Rights Reserved.
**  This program contains proprietary and trade secret information of MatrixOne,
**  Inc.  Copyright notice is precautionary only
**  and does not evidence any actual or intended publication of such program
**
**   This JPO contains the implementation of emxAEFCollectionBase
*/
/*
insert program C:/workspace_test/3dspace_FD02/jpo/${CLASS:decInterfaceDV}.java;
compile prog decInterfaceDV force update;
execute program decInterfaceDV -method getDeliverableStatus;	
execute program decInterfaceDV -method getVendorPrint;
mql -c "set cont user creator;execute program decInterfaceDV -method getDeliverableStatus;"
 */
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Vector;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.ignite.spi.communication.tcp.internal.DisconnectedSessionInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aspose.slides.Collections.Hashtable;
import com.dassault.fst.Constants;
import com.dassault_systemes.enovia.formulation.custom.FormulationPart;
import com.dassault_systemes.enovia.formulation.custom.enumeration.FormulationAttribute;
import com.dassault_systemes.enovia.formulation.custom.enumeration.FormulationRelationship;
import com.dassault_systemes.enovia.formulation.custom.enumeration.FormulationType;
import com.matrixone.apps.cpn.util.BusinessUtil;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.StringUtil;
import com.matrixone.apps.domain.util.XSSUtil;
import com.matrixone.apps.framework.ui.UIUtil;
import com.matrixone.apps.program.ProgramCentralConstants;
import com.matrixone.apps.program.ProgramCentralUtil;
import com.matrixone.apps.program.Task;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.Pattern;
import matrix.util.StringList;

/**
 * The <code>emxAEFCollectionBase</code> class contains methods for the
 * "Collection" Common Component.
 *
 * @version AEF 10.0.Patch1.0 - Copyright (c) 2003, MatrixOne, Inc.
 */

public class atisCUPProposal_mxJPO {

	private static final String EMX_COMPONENTS_STRING_RESOURCE = "emxComponentsStringResource";
    private static final Logger logger = LoggerFactory.getLogger(atisCUPProposal_mxJPO.class);

    
    public Map createCUPProposal(Context context, String[] args) throws Exception {

		Map programMap = JPO.unpackArgs(args);
		// ContextUtil.startTransaction(context, true);
		String objectId = (String) programMap.get("objectId");
		String name = "";
		String desc = (String) programMap.get("description");
		String attr1 = (String) programMap.get("attr1");
		String CUPSelectOID = (String) programMap.get("CUPSelectOID");
		
		Map returnMap = new HashMap();
		//String strObjectGeneratorName = FrameworkUtil.getAliasForAdmin(context, DomainConstants.SELECT_TYPE, "Raw Material", true);

		try {
			System.out.println(" [S] create CUPProposalobject ");
			////
			ContextUtil.startTransaction(context, true);
			
			////
			DomainObject dom = new DomainObject();
			
			name = DomainObject.getAutoGeneratedName(context, "type_atisCUPProposal", "");
			// Map resultMap = createCodeMaster(context, programMap);
			dom.createObject(context, "atisCUPProposal", name, "", "atisCUPProposalPolicy", "eService Production");
			//dom.setDescription(context, desc);
			//String newObjId = dom.getInfo(context, "id");
			String newObjId = dom.getId(context);
			if(StringUtils.isNoneEmpty(objectId)) {
				DomainRelationship.connect(context, new DomainObject(objectId), "atisCUPToCUPProposal", dom);
			}else if(StringUtils.isNoneEmpty(CUPSelectOID)) {
				DomainRelationship.connect(context, new DomainObject(CUPSelectOID), "atisCUPToCUPProposal", dom);
			}
			ContextUtil.commitTransaction(context);
			StringList busSelects = new StringList();
			busSelects.add(DomainConstants.SELECT_ID);
			busSelects.add(DomainConstants.SELECT_NAME);
//			MapList personMap = DomainObject.findObjects(context, "atisCUPProposalMasterMember", "*", null, busSelects);
//			for(Object o : personMap) {
//				Map map = (Map) o;
//				String memberId = (String)map.get("id");
//				if(StringUtils.isNoneEmpty(memberId)) {
//				  DomainRelationship.connect(context, dom, "atisCUPProposalMember", new DomainObject(memberId));
//				  System.out.println("releate member - proposal");
//				}
//			}
			returnMap.put("id", newObjId);

			System.out.println(" [E] create CUPProposal object ");

		} catch (Exception e) {
			e.printStackTrace();
		}

		return returnMap;
	}
    public MapList updateAttributeValue(Context context, String[] args) throws Exception {
    	
    		HashMap programMap = (HashMap) JPO.unpackArgs(args); 
    		HashMap paramMap = (HashMap) programMap.get("paramMap");
    		String oId = (String) paramMap.get("objectId");
    		String newValue = (String) paramMap.get("New Value");
    		HashMap fieldMap = (HashMap) programMap.get("fieldMap");
    		String attrName = (String) fieldMap.get("name");
    		MapList map = new MapList();
    		System.out.println("new val:"+newValue+", oId:"+ oId +", attrName:"+attrName);
    		System.out.println("update");
    		if(attrName.contains("StartDate") || attrName.contains("EndDate")) {
    		  DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy. M. d.");
              DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
              // 문자열 -> LocalDate -> 원하는 형식의 문자열로 변환
              LocalDate date = LocalDate.parse(newValue, inputFormatter);
              newValue= date.format(outputFormatter);
    		}
    		
    		try {
    			DomainObject dom = new DomainObject(oId);
    			String proposalId = dom.getInfo(context, "from[atisCUPToCUPProposal].to.id");
    			DomainObject proposalDom = new DomainObject(proposalId);
    			proposalDom.setAttributeValue(context, attrName, newValue);
    		}catch(Exception e) {
    			e.printStackTrace();
    		}
    		return map;
    }
    
    public Map getProposalGradeRange(Context context, String[] args) throws Exception{
    	
    	MapList ml = new MapList();
		HashMap programMap = (HashMap) JPO.unpackArgs(args); // get data
		Map rangeMap = new HashMap();
		StringList busSelects = new StringList();
		busSelects.add(DomainConstants.SELECT_ID);
		busSelects.add(DomainConstants.SELECT_NAME);

		StringList fieldRangeValue = new StringList();
		StringList fieldDisplayRangeValue = new StringList();

		fieldRangeValue.add("1등급");
		fieldDisplayRangeValue.add("1등급");
		fieldRangeValue.add("2등급");
		fieldDisplayRangeValue.add("2등급");
		fieldRangeValue.add("3등급");
		fieldDisplayRangeValue.add("3등급");
		rangeMap.put("field_choices", fieldRangeValue);
		rangeMap.put("field_display_choices", fieldDisplayRangeValue);
		return rangeMap;
		
	}
    
public Map  getProposalTypeRange(Context context, String[] args) throws Exception{
    	
    	MapList ml = new MapList();
		HashMap programMap = (HashMap) JPO.unpackArgs(args); // get data
		Map rangeMap = new HashMap();
		StringList busSelects = new StringList();
		busSelects.add(DomainConstants.SELECT_ID);
		busSelects.add(DomainConstants.SELECT_NAME);

		StringList fieldRangeValue = new StringList();
		StringList fieldDisplayRangeValue = new StringList();

		fieldRangeValue.add("연구과제");
		fieldDisplayRangeValue.add("연구과제");
		fieldRangeValue.add("국책과제");
		fieldDisplayRangeValue.add("국책과제");
		fieldRangeValue.add("실행과제");
		fieldDisplayRangeValue.add("실행과제");
		rangeMap.put("field_choices", fieldRangeValue);
		rangeMap.put("field_display_choices", fieldDisplayRangeValue);
		return rangeMap;
		
	}

    public Map getOXRange(Context context, String[] args) throws Exception{
    	
    	MapList ml = new MapList();
		HashMap programMap = (HashMap) JPO.unpackArgs(args); // get data
		Map rangeMap = new HashMap();
		StringList busSelects = new StringList();
		busSelects.add(DomainConstants.SELECT_ID);
		busSelects.add(DomainConstants.SELECT_NAME);

		StringList fieldRangeValue = new StringList();
		StringList fieldDisplayRangeValue = new StringList();
		
		fieldRangeValue.add("");
		fieldDisplayRangeValue.add("");
		fieldRangeValue.add("O");
		fieldDisplayRangeValue.add("O");
		fieldRangeValue.add("X");
		fieldDisplayRangeValue.add("X");
		
		rangeMap.put("field_choices", fieldRangeValue);
		rangeMap.put("field_display_choices", fieldDisplayRangeValue);
		return rangeMap;
		
	}  
    
    
	public boolean canEditCUPProposal(Context context, String[] args) throws Exception {
		boolean CanEdit = false;
	    Map programMap = (Map) JPO.unpackArgs(args);
	    String objectId = (String) programMap.get("objectId");
	    DomainObject domObj = DomainObject.newInstance(context, objectId);
	    String proposalId = domObj.getInfo(context, "from[atisCUPToCUPProposal].to.id");

	    if(StringUtils.isNotEmpty(proposalId)) {
	    	CanEdit = true;
	    }
	    return CanEdit;
	}
	
	public boolean canCreateCUPProposal(Context context, String[] args) throws Exception {
		boolean CanEdit = true;
	    Map programMap = (Map) JPO.unpackArgs(args);
	    String objectId = (String) programMap.get("objectId");
	    DomainObject domObj = DomainObject.newInstance(context, objectId);
	    String proposalId = domObj.getInfo(context, "from[atisCUPToCUPProposal].to.id");

	    if(StringUtils.isNotEmpty(proposalId)) {
	    	CanEdit = false;
	    }
	    return CanEdit;
	}
	
	public MapList getCUPProposalMember(Context context, String[] args) throws Exception {
	    	
  		HashMap programMap = (HashMap) JPO.unpackArgs(args); 
  		String returnStr ="국내";
  		MapList returnMap = new MapList();
  		HashMap paramMap = (HashMap) programMap.get("paramMap");
  		String oId = (String) programMap.get("objectId");
  		DomainObject cupDom = DomainObject.newInstance(context, oId);
  		DomainObject pDom = null;
  		MapList propertyDataMap = new MapList();
  		String oType = cupDom.getTypeName(context);
  		if("atisCUPProposal".equals(oType)) {
  			pDom = new DomainObject(oId);
  		}else {
  			String pId = cupDom.getInfo(context,  "from[atisCUPToCUPProposal].to.id");
  			pDom = new DomainObject(pId);
  			if(StringUtils.isEmpty(pId)) {
  				return propertyDataMap;
  			}
  		}
  		StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
        StringList relSelects = new StringList();
        relSelects.add(DomainRelationship.SELECT_ID); 
        relSelects.add(DomainRelationship.SELECT_NAME);
        relSelects.add(DomainRelationship.SELECT_DESCRIPTION);
        relSelects.add("attribute[atisCUPProposalMemberHeadcount]");
        relSelects.add("attribute[atisCUPProposalMemberDuration]");
        relSelects.add("attribute[atisCUPProposalMemberPercent]");
        relSelects.add("attribute[atisCUPProposalMemberMM]");
        
       // DomainObject partDom = new DomainObject(partId);
        propertyDataMap = pDom.getRelatedObjects(context, "atisCUPProposalMember", "*", busSelects, relSelects,
                false, true, (short) 0, "", "", 0);
        propertyDataMap.sortStructure("name", "ascending", "String");
  		//
  		//System.out.println("new val:"+newValue+", oId:"+ oId +", attrName:"+attrName);
  		System.out.println("update");
  		return propertyDataMap;
	 }
	
	
	public MapList getWorkspace(Context context, String[] args) throws Exception {
    	
  		HashMap programMap = (HashMap) JPO.unpackArgs(args); 
  		MapList ml = new MapList();

        StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);

        ml = DomainObject.findObjects(context, "Workspace Vault", "*",
        		"attribute[atisGDCCheck]=='Y' && attribute[atisGDCCheck2]==''", busSelects);

        return ml;
	 }
	
	public MapList getCUPWorkspace(Context context, String[] args) throws Exception {
		
		HashMap programMap = (HashMap) JPO.unpackArgs(args);
		MapList ml = new MapList();
		
		HashMap paramMap = (HashMap) programMap.get("paramMap");
		String oId = (String) programMap.get("objectId");
		DomainObject cupDom = DomainObject.newInstance(context, oId);
		StringList selects = new StringList();
		selects.add("type");
		selects.add("name");
		selects.add("attribute[V_Name]");
		Map map = cupDom.getInfo(context, selects);
		String type = (String) map.get("type");
		String cupName = (String) map.get("attribute[V_Name]");
		if("atisCUPProposal".equals(type)) {
			cupName = (String) map.get("name");
		}
		StringList busSelects = new StringList();
		busSelects.add(DomainConstants.SELECT_ID);
		busSelects.add(DomainConstants.SELECT_NAME);
		busSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
		
		ml = DomainObject.findObjects(context, "Workspace Vault", "*", "attribute[atisGDCCheck]=='Y' && attribute[atisGDCCheck2]=='"+cupName+"'", busSelects);
		
		return ml;
	}
	
	public Vector getCUPProposalMemberPercent(Context context, String[] args) throws Exception {
    	
  		HashMap programMap = (HashMap) JPO.unpackArgs(args); 
  		MapList ml = new MapList();
  		Vector vec = new Vector();
  		HashMap paramMap = (HashMap) programMap.get("paramList");
  		
  		String oId = (String) paramMap.get("objectId");
  		DomainObject cupDom = DomainObject.newInstance(context, oId);
		
  		DomainObject pDom = null;
  		String oType = cupDom.getTypeName(context);
  		if("atisCUPProposal".equals(oType)) {
  			pDom = new DomainObject(oId);
  		}else {
  			String pId = cupDom.getInfo(context,  "from[atisCUPToCUPProposal].to.id");
  			pDom = new DomainObject(pId);
  		}
  		
  		String strStartDate = pDom.getAttributeValue(context,"atisProposalStartDate");
  		String strEndDate = pDom.getAttributeValue(context,"atisProposalEndDate");
  		
  		 DateTimeFormatter formatter = DateTimeFormatter.ofPattern("M/d/yyyy h:mm:ss a");
  		 
  		 // 문자열을 LocalDateTime으로 변환
         LocalDateTime dStartDate = LocalDateTime.parse(strStartDate, formatter);
         LocalDateTime dEndDate = LocalDateTime.parse(strEndDate, formatter);

         // 총 기간(개월 수) 계산
         long totalMonths = ChronoUnit.MONTHS.between(dStartDate.withDayOfMonth(1), dEndDate.withDayOfMonth(1)) + 1;
         
  		 
  		MapList objMap = (MapList) programMap.get("objectList");
  		for(int i = 0; i<objMap.size(); i++) {
  			Map m = (Map) objMap.get(i);
  			String mId = (String) m.get("id");
  			String mDue = (String) m.get("attribute[atisCUPProposalMemberDuration]");
  			
  			 // 참여율 계산
  			if(StringUtils.isNotEmpty(mDue)) {
  	        double participationRate = (double) Integer.valueOf(mDue) / totalMonths * 100;
  	        double roundedRate = Math.round(participationRate * 10) / 10.0;
  	        String roundedRateString = String.format("%.1f", roundedRate);
  	        	 vec.add(roundedRateString);
  			}else {
  				 vec.add("");
  			}
  	        System.out.println("test");
  		}
  		
        return vec;
	 }
	
	public MapList getCUPProposalCost(Context context, String[] args) throws Exception {
    	
  		HashMap programMap = (HashMap) JPO.unpackArgs(args); 
  		String returnStr ="proposal - cost";
  		MapList returnMap = new MapList();
  		HashMap paramMap = (HashMap) programMap.get("paramMap");
  		String oId = (String) programMap.get("objectId");
  		DomainObject cupDom = DomainObject.newInstance(context, oId);
  		DomainObject pDom = null;
  		MapList propertyDataMap = new MapList();
  		String oType = cupDom.getTypeName(context);
  		if("atisCUPProposal".equals(oType)) {
  			pDom = new DomainObject(oId);
  		}else {
  			String pId = cupDom.getInfo(context,  "from[atisCUPToCUPProposal].to.id");
  			pDom = new DomainObject(pId);
  			if(StringUtils.isEmpty(pId)) {
  				return propertyDataMap;
  			}
  		}
  		StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
        StringList relSelects = new StringList();
        relSelects.add(DomainRelationship.SELECT_ID); 
        relSelects.add(DomainRelationship.SELECT_NAME);
        relSelects.add(DomainRelationship.SELECT_DESCRIPTION);
        relSelects.add("attribute[atisCUPProposalCostCost]");
        relSelects.add("attribute[atisCUPProposalCostUnit]");
        relSelects.add("attribute[atisCUPProposalCostEqui]");
        relSelects.add("attribute[atisCUPProposalCostEquiCost]");
        
       // DomainObject partDom = new DomainObject(partId);
        propertyDataMap = pDom.getRelatedObjects(context, "atisCUPProposalCost", "*", busSelects, relSelects,
                false, true, (short) 0, "", "", 0);
        propertyDataMap.sortStructure("name", "ascending", "String");
  		//
  		//System.out.println("new val:"+newValue+", oId:"+ oId +", attrName:"+attrName);
  		System.out.println("update");
  		return propertyDataMap;
	 }
	

	public MapList getCUPProposalDepart(Context context, String[] args) throws Exception {
    	
  		HashMap programMap = (HashMap) JPO.unpackArgs(args); 
  		String returnStr ="proposal - Depart";
  		MapList returnMap = new MapList();
  		HashMap paramMap = (HashMap) programMap.get("paramMap");
  		String oId = (String) programMap.get("objectId");
  		DomainObject cupDom = DomainObject.newInstance(context, oId);
  		StringList selectStr = new StringList();
  		DomainObject pDom = null;
  		 MapList propertyDataMap = new MapList();
  		String oType = cupDom.getTypeName(context);
  		if("atisCUPProposal".equals(oType)) {
  			pDom = new DomainObject(oId);
  		}else {
  			String pId = cupDom.getInfo(context,  "from[atisCUPToCUPProposal].to.id");
  			pDom = new DomainObject(pId);
  			if(StringUtils.isEmpty(pId)) {
  				return propertyDataMap;
  			}
  		}
  		StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
        StringList relSelects = new StringList();
        relSelects.add(DomainRelationship.SELECT_ID); 
        relSelects.add(DomainRelationship.SELECT_NAME);
        relSelects.add(DomainRelationship.SELECT_DESCRIPTION);
        relSelects.add("attribute[atisCUPProposalCostCost]");
        relSelects.add("attribute[atisCUPProposalCostUnit]");
        relSelects.add("attribute[atisCUPProposalCostEqui]");
        relSelects.add("attribute[atisCUPProposalCostEquiCost]");
        
       // DomainObject partDom = new DomainObject(partId);
        propertyDataMap = pDom.getRelatedObjects(context, "atisCUPProposalDepart", "*", busSelects, relSelects,
                false, true, (short) 0, "", "", 0);
        propertyDataMap.sortStructure("name", "ascending", "String");
  		//
  		//System.out.println("new val:"+newValue+", oId:"+ oId +", attrName:"+attrName);
  		System.out.println("update");
  		return propertyDataMap;
	 }
	
	
	public MapList getProposalList(Context context, String[] args) throws Exception {
    	
  		HashMap programMap = (HashMap) JPO.unpackArgs(args); 
  		MapList ml = new MapList();

        StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);

        ml = DomainObject.findObjects(context, "atisCUPProposal", "*",
        		null, busSelects);

        return ml;
	 }
	
	@com.matrixone.apps.framework.ui.ExcludeOIDProgramCallable
  	public static Object excludeCUP(Context context, String[] args ) throws Exception
  	{
  		StringList excludeOID = new StringList();
  		try
  		{
  			HashMap paramMap = (HashMap)JPO.unpackArgs(args);
  			String objectId = (String)paramMap.get("objectId");
  			String fieldNameOID =  (String)paramMap.get("fieldNameOID");
  			String HazId = "40038.25834.25779.30780";
  			String cupId = "";
  			String exid = "";
  			String oName = "";
  			String oType ="";
  			StringList busSelects = new StringList();
  			busSelects.add(DomainConstants.SELECT_ID);
  			busSelects.add(DomainConstants.SELECT_NAME);
  			MapList ml = new MapList();
  			ml = DomainObject.findObjects(context, "Consumer Unit Part", "*", "", busSelects);
  			for(Object o : ml) {
	  				Map map = (Map) o;
	  				oName = (String) map.get("name");
	  				cupId = (String) map.get("id");
	  				DomainObject cupDom = new DomainObject(cupId);
	  				String check = cupDom.getInfo(context, "from[atisCUPToCUPProposal].to.id");
	  				
	  				if(StringUtils.isNotEmpty(check)) {
	  					excludeOID.add(cupId);
	  					System.out.println("제외 id:"+exid+", name:"+ oName);
	  				}
				
	  		}
  			
  			return excludeOID;
  		}
  		catch (Exception ex)
  		{

  			throw ex;
  		}
  	}
	
	public MapList getRelatedCUPToCUPProposal(Context context, String[] args) throws Exception {
		MapList maplist = new MapList();
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap paramMap = (HashMap) programMap.get("paramMap");
			String objectId = (String) programMap.get("objectId");
			DomainObject domainObject = DomainObject.newInstance(context, objectId);
			StringList typeSelects = new StringList();
			typeSelects.add("id");
			String objectWhere = "";
			maplist = domainObject.getRelatedObjects(context, "atisRelatedCUPToCUPProposal", "Consumer Unit Part",
					typeSelects, null, false, true, (short) 1, objectWhere, null, 0);
		}catch(Exception e) {
			
		}
		return maplist;
	}
	
	 public MapList getCompareReport(Context context, MapList invokeMap) {
	    	
	    	StringBuffer exportReport= null;
	    	MapList m = new MapList();
	    	System.out.println("test");	
	    //	return exportReport;
	    	return m;
	 }
	 
	 public MapList getRelatedCUPProposalToCUP(Context context, String[] args) throws Exception {
			MapList maplist = new MapList();
			try {
				HashMap programMap = (HashMap) JPO.unpackArgs(args);
				HashMap paramMap = (HashMap) programMap.get("paramMap");
				String objectId = (String) programMap.get("objectId");
				DomainObject domainObject = DomainObject.newInstance(context, objectId);
				StringList typeSelects = new StringList();
				typeSelects.add("id");
				typeSelects.add("attribute[atisTCSYNclassification]");
				String objectWhere = "";
				maplist = domainObject.getRelatedObjects(context, "atisRelatedCUPProposalToCUP", "Consumer Unit Part",
						typeSelects, null, false, true, (short) 1, objectWhere, null, 0);
			}catch(Exception e) {
				
			}
			return maplist;
		}
}