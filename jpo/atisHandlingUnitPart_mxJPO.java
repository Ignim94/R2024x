import java.util.HashMap;
import java.util.Map;


import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.XSSUtil;

import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.StringList;


public class atisHandlingUnitPart_mxJPO {

    public MapList getHandlingUnitPart(Context context, String[] args) throws Exception{
    	MapList handlingUnitPartList = new MapList();
        try {

            String sWhere = "(revision==last)&&(current!=Obsolete)";

            StringList busSelects = new StringList();
            busSelects.add("id");
            busSelects.add("name");
            busSelects.add("current");
            busSelects.add("owner");
            busSelects.add("modified");

            handlingUnitPartList = DomainObject.findObjects(context
                    , "Handling Unit Part"                      // typePattern
                    , "*"                                       // namePattern
                    , "*"                                       // revisionPattern
                    , "*"                                       // ownerPatten
                    , "*"                                       // vaultPatten
                    , sWhere                                    // whereExpValue
                    , false                                     // expendsType
                    , busSelects                                // objectSelect
            );
            handlingUnitPartList.sort("modified", "descending", "date");

        } catch (Exception e) {
            throw e;
        }
        return handlingUnitPartList;
    }

    public String getCunitName(Context context, String[] args) throws Exception{
    	
        String ret = "omg";
        System.out.println("no such methods");
        
        
        StringBuffer sbHref  = new StringBuffer();
        StringBuffer sbBuffer  = new StringBuffer();
        
        sbHref.append("<A HREF=\"JavaScript:showDetailsPopup('../common/emxTree.jsp?objectId=");
        sbHref.append("40038.25834.7872.10916");
        sbHref.append("&mode=replace");
        sbHref.append("&AppendParameters=true");
        sbHref.append("&reloadAfterChange=true");
        sbHref.append("')\"class=\"object\">");
        sbHref.append("<img border=\"0\" src=\"");
        sbHref.append("../common/images/iconSmallPart.png");
        sbHref.append("\"</img>");
        sbHref.append("</A>");
        sbHref.append("&nbsp");
        sbHref.append("<A HREF=\"javascript:showDetailsPopup('../common/emxTree.jsp?objectId=");
        sbHref.append("40038.25834.56749.55854");
        sbHref.append("&mode=replace");
        sbHref.append("&AppendParameters=true");
        sbHref.append("&reloadAfterChange=true");
        sbHref.append("')\"class=\"object\">");
        sbHref.append("CUNIT-00001");
        sbHref.append("</A>");
        return sbHref.toString();
        
    }
    
    public void deleteRawMaterial(Context context, String[] args) throws Exception {
    	try
    	{
    	  
    		MapList ml = new MapList();
    		String mOid ="";
    		StringList busSelects = new StringList();
    		busSelects.add(DomainConstants.SELECT_ID);
    		busSelects.add(DomainConstants.SELECT_NAME);
    		
    		ml = DomainObject.findObjects(context, "Raw Material", "*", "",busSelects);
    		
    		System.out.println("ml find finish. size : "+ml.size());
    		int i = 0;
    		for(Object o : ml) {
    			Map mO = (Map) o;
				mOid = (String) mO.get("id");
				DomainObject dom = new DomainObject(mOid);
				dom.deleteObject(context);
				i++;
				System.out.println("delete :"+ i + ", remain size : "+ml.size());
    			
    		}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
    
    public Map createHandlingUnitPart(Context context, String[] args) throws Exception {
    	Map returnMap = new HashMap();
    	String id = null;
    	StringBuffer text = new StringBuffer();
    	try {
    		ContextUtil.startTransaction(context, true);
    		
    		Map paramMap = JPO.unpackArgs(args);
    		
    		String vName = (String) paramMap.get("V_Name");
    		String atisGDC_CODE = (String) paramMap.get("atisGDC_CODE");
    		String desc = (String) paramMap.get("description");
    		String atisManufacture = (String) paramMap.get("atisManufactureDisplay");
    		
    		DomainObject domainObject = new DomainObject();
    		String name = domainObject.getAutoGeneratedName(context, "type_HandlingUnitPart", "A");
    		domainObject.createObject(context, "Handling Unit Part", name, "A", "EC Part", "eService Production");
    		domainObject.setDescription(context, desc);

    		Map attrMap = new HashMap();
    		attrMap.put("V_Name", vName);
    		attrMap.put("atisGDC_CODE", atisGDC_CODE);
    		attrMap.put("atisManufacture", atisManufacture);
    		domainObject.setAttributeValues(context, attrMap);
			
    		ContextUtil.commitTransaction(context);
    		returnMap.put("id", domainObject.getInfo(context, "id"));
    	} catch(Exception ex) {
    		ContextUtil.abortTransaction(context);
    		ex.printStackTrace();
    		//throw new Exception("Create Process Failed.\nPlease contact to Administrator");
    		throw ex;
    	}
    	return returnMap;
    }
    
    public void updateatisManufacture(Context context, String[] args) throws FrameworkException {
    	try {
    		HashMap programMap = (HashMap) JPO.unpackArgs(args);
        	HashMap requestMap = (HashMap) programMap.get("requestMap");
        	HashMap paramMap = (HashMap) programMap.get("paramMap");
        	String parentId = (String) requestMap.get("parentOID");
        	String objectId = (String) paramMap.get("objectId");
        	String relId = (String) paramMap.get("relId");
        	String newValue = (String) paramMap.get("New Value");
        	newValue = newValue == null ? "" : newValue;
        	DomainObject domainObject = new DomainObject();
        	if(!"".equals(newValue)) {
        		domainObject.setId(newValue);
        		newValue = domainObject.getInfo(context, "attribute[Organization Name]");
        	}
        	domainObject.setId(objectId);
        	domainObject.setAttributeValue(context, "atisManufacture", newValue);
    	} catch(Exception e) {
    		throw new FrameworkException("Update Process Failed.\nPlease contact to Administrator");
    	}
    }
}
